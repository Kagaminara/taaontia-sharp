// <auto-generated />
using System;
using Discord_Bot.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Discord_Bot.Migrations
{
    [DbContext(typeof(DiscordBotEntities))]
    [Migration("20211122013452_CharacterOverhaul")]
    partial class CharacterOverhaul
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("Discord_Bot.Database.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Energy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FightId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FightId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxEnergy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FightId");

                    b.HasIndex("FightId1");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Discord_Bot.Database.EightBallAnswer", b =>
                {
                    b.Property<long>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerText")
                        .HasColumnType("TEXT");

                    b.HasKey("AnswerId");

                    b.ToTable("EightBallAnswer");
                });

            modelBuilder.Entity("Discord_Bot.Database.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FightId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FightId");

                    b.HasIndex("TargetId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Discord_Bot.Database.Fiend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CharacterForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FiendTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterForeignKey")
                        .IsUnique();

                    b.HasIndex("FiendTypeId");

                    b.ToTable("Fiend");
                });

            modelBuilder.Entity("Discord_Bot.Database.FiendType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseEnergy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FiendType");
                });

            modelBuilder.Entity("Discord_Bot.Database.Fight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FiendId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FiendId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Fight");
                });

            modelBuilder.Entity("Discord_Bot.Database.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CharacterForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiscordDiscriminator")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("DiscordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterForeignKey")
                        .IsUnique();

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Discord_Bot.Database.Character", b =>
                {
                    b.HasOne("Discord_Bot.Database.Fight", null)
                        .WithMany("Allies")
                        .HasForeignKey("FightId");

                    b.HasOne("Discord_Bot.Database.Fight", null)
                        .WithMany("Fiends")
                        .HasForeignKey("FightId1");
                });

            modelBuilder.Entity("Discord_Bot.Database.Event", b =>
                {
                    b.HasOne("Discord_Bot.Database.Character", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Discord_Bot.Database.Fight", "Fight")
                        .WithMany("Events")
                        .HasForeignKey("FightId");

                    b.HasOne("Discord_Bot.Database.Character", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Author");

                    b.Navigation("Fight");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Discord_Bot.Database.Fiend", b =>
                {
                    b.HasOne("Discord_Bot.Database.Character", "Character")
                        .WithOne("Fiend")
                        .HasForeignKey("Discord_Bot.Database.Fiend", "CharacterForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Discord_Bot.Database.FiendType", "FiendType")
                        .WithMany()
                        .HasForeignKey("FiendTypeId");

                    b.Navigation("Character");

                    b.Navigation("FiendType");
                });

            modelBuilder.Entity("Discord_Bot.Database.Fight", b =>
                {
                    b.HasOne("Discord_Bot.Database.Fiend", null)
                        .WithMany("Fights")
                        .HasForeignKey("FiendId");

                    b.HasOne("Discord_Bot.Database.Player", null)
                        .WithMany("Fights")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Discord_Bot.Database.Player", b =>
                {
                    b.HasOne("Discord_Bot.Database.Character", "Character")
                        .WithOne("Player")
                        .HasForeignKey("Discord_Bot.Database.Player", "CharacterForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Discord_Bot.Database.Character", b =>
                {
                    b.Navigation("Fiend");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Discord_Bot.Database.Fiend", b =>
                {
                    b.Navigation("Fights");
                });

            modelBuilder.Entity("Discord_Bot.Database.Fight", b =>
                {
                    b.Navigation("Allies");

                    b.Navigation("Events");

                    b.Navigation("Fiends");
                });

            modelBuilder.Entity("Discord_Bot.Database.Player", b =>
                {
                    b.Navigation("Fights");
                });
#pragma warning restore 612, 618
        }
    }
}
